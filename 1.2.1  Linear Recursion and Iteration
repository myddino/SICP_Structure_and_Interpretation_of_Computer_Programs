n! = n(n-1)(n-2) * ... * 3 * 2 * 1

(0) n! = n * [ (n-1)(n-2) *...* 3 * 2 * 1] = n * (n-1)!

(define (factorial n)
  (if (= n 1)
      1
      (* n (fatorial (- n 1) ) ) ))
      
      
(1) substitution -> linear recursive process (deferred operation)

6!

(fact 6)
(* 6 (fact 5))
(* 6 (* 5 (fact 4) ))
(* 6 (* 5 (* 4 (fact 3) )))
(* 6 (* 5 (* 4 (* 3 (fact 2) ))))
(* 6 (* 5 (* 4 (* 3 (* 2 (fact 1) )))))
(* 6 (* 5 (* 4 (* 3 (* 2 1) ))))
(* 6 (* 5 (* 4 (* 3 2) )))
(* 6 (* 5 (* 4 6) ))
...






(2) linear inerative process (state variable)



    product <- counter * product
    counter <- counter + 1
    
(define (fact n)
  (fact-iter 1 1 n) )
  
(define (fact n)
  (define (iter product counter)
    (if (> counter n)
        product
        (iter (* counter product)
              (+ counter 1) )))
   (iter 1 1) )
   
   


(fact 6)
(fact-iter 1 1 6)
(fact-iter 1 2 6)
(fact-iter 2 3 6)
...

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count) ))
